// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Name.Infrastructure.Data;

#nullable disable

namespace Erp.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20250127002611_remove company id from all")]
    partial class removecompanyidfromall
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Erp.Data.Entities.AccountsModule.Account", b =>
                {
                    b.Property<int>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountID"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentAccountID")
                        .HasColumnType("int");

                    b.Property<int?>("PrimaryAccountAccountID")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("AccountID");

                    b.HasIndex("ParentAccountID");

                    b.HasIndex("PrimaryAccountAccountID");

                    b.ToTable("Accounts");

                    b.HasDiscriminator<string>("AccountType").HasValue("Account");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Erp.Data.Entities.AccountsModule.CostCenter", b =>
                {
                    b.Property<int>("CostCenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CostCenterId"));

                    b.Property<string>("CostCenterType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentCostCenterID")
                        .HasColumnType("int");

                    b.Property<int?>("PrimaryCostCenterCostCenterId")
                        .HasColumnType("int");

                    b.HasKey("CostCenterId");

                    b.HasIndex("ParentCostCenterID");

                    b.HasIndex("PrimaryCostCenterCostCenterId");

                    b.ToTable("costCenters");

                    b.HasDiscriminator<string>("CostCenterType").HasValue("CostCenter");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Erp.Data.Entities.AccountsModule.JournalEntry", b =>
                {
                    b.Property<int>("JournalEntryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JournalEntryID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime");

                    b.HasKey("JournalEntryID");

                    b.ToTable("journalEntries");
                });

            modelBuilder.Entity("Erp.Data.Entities.AccountsModule.JournalEntryDetail", b =>
                {
                    b.Property<int>("JournalEntryDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JournalEntryDetailID"));

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<int?>("CostCenterId")
                        .HasColumnType("int");

                    b.Property<decimal>("Credit")
                        .HasColumnType("decimal(15, 2)");

                    b.Property<decimal>("Debit")
                        .HasColumnType("decimal(15, 2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JournalEntryID")
                        .HasColumnType("int");

                    b.Property<int?>("SecondaryAccountAccountID")
                        .HasColumnType("int");

                    b.Property<int?>("SecondaryCostCenterCostCenterId")
                        .HasColumnType("int");

                    b.HasKey("JournalEntryDetailID");

                    b.HasIndex("AccountID");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("JournalEntryID");

                    b.HasIndex("SecondaryAccountAccountID");

                    b.HasIndex("SecondaryCostCenterCostCenterId");

                    b.ToTable("journalEntryDetails");
                });

            modelBuilder.Entity("Erp.Data.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Erp.Data.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Erp.Data.Entities.DebitNote", b =>
                {
                    b.Property<int>("DebitNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DebitNoteId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("NoteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("DebitNoteId");

                    b.HasIndex("SupplierId");

                    b.ToTable("DebitNotes");
                });

            modelBuilder.Entity("Erp.Data.Entities.DebitNoteItem", b =>
                {
                    b.Property<int>("DebitNoteItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DebitNoteItemId"));

                    b.Property<int>("DebitNoteId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("discount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("DebitNoteItemId");

                    b.HasIndex("DebitNoteId");

                    b.HasIndex("ProductId");

                    b.ToTable("DebitNoteItems");
                });

            modelBuilder.Entity("Erp.Data.Entities.DeliveryVoucher", b =>
                {
                    b.Property<int>("DeliveryVoucherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryVoucherId"));

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("DeliveryVoucherId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("DeliveryVouchers");
                });

            modelBuilder.Entity("Erp.Data.Entities.DeliveryVoucherItem", b =>
                {
                    b.Property<int>("DeliveryVoucherItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryVoucherItemId"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("deliveryVoucherId")
                        .HasColumnType("int");

                    b.HasKey("DeliveryVoucherItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("deliveryVoucherId");

                    b.ToTable("deliveryVoucherItems");
                });

            modelBuilder.Entity("Erp.Data.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Erp.Data.Entities.PurchaseInoviceSettings", b =>
                {
                    b.Property<int>("PurchaseInoviceSettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseInoviceSettingsId"));

                    b.HasKey("PurchaseInoviceSettingsId");

                    b.ToTable("purchaseInoviceSettings");
                });

            modelBuilder.Entity("Erp.Data.Entities.PurchaseInvoice", b =>
                {
                    b.Property<int>("PurchaseInvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseInvoiceId"));

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("numberOfDaysToPay")
                        .HasColumnType("int");

                    b.HasKey("PurchaseInvoiceId");

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchaseInvoices");
                });

            modelBuilder.Entity("Erp.Data.Entities.PurchaseInvoiceItem", b =>
                {
                    b.Property<int>("PurchaseInvoiceItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseInvoiceItemId"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseInvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("discount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PurchaseInvoiceItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseInvoiceId");

                    b.ToTable("PurchaseInvoiceItems");
                });

            modelBuilder.Entity("Erp.Data.Entities.PurchaseReturn", b =>
                {
                    b.Property<int>("PurchaseReturnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseReturnId"));

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("supplierId")
                        .HasColumnType("int");

                    b.HasKey("PurchaseReturnId");

                    b.HasIndex("supplierId");

                    b.ToTable("PurchaseReturns");
                });

            modelBuilder.Entity("Erp.Data.Entities.PurchaseReturnItem", b =>
                {
                    b.Property<int>("PurchaseReturnItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseReturnItemId"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseReturnId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("discount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PurchaseReturnItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseReturnId");

                    b.ToTable("PurchaseReturnItems");
                });

            modelBuilder.Entity("Erp.Data.Entities.ReceivingVoucher", b =>
                {
                    b.Property<int>("ReceivingVoucherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceivingVoucherId"));

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReceivingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("ReceivingVoucherId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("ReceivingVouchers");
                });

            modelBuilder.Entity("Erp.Data.Entities.ReceivingVoucherItem", b =>
                {
                    b.Property<int>("ReceivingVoucherItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceivingVoucherItemId"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("receivingVoucherId")
                        .HasColumnType("int");

                    b.HasKey("ReceivingVoucherItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("receivingVoucherId");

                    b.ToTable("receivingVoucherItems");
                });

            modelBuilder.Entity("Erp.Data.Entities.StockTransaction", b =>
                {
                    b.Property<int>("StockTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockTransactionId"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("StockTransactionId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("StockTransactions");
                });

            modelBuilder.Entity("Erp.Data.Entities.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Erp.Data.Entities.TransformVoucher", b =>
                {
                    b.Property<int>("TransformVoucherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransformVoucherId"));

                    b.Property<int?>("FromWarehouseId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ToWarehouseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransformDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TransformVoucherId");

                    b.HasIndex("FromWarehouseId");

                    b.HasIndex("ToWarehouseId");

                    b.ToTable("transformVouchers");
                });

            modelBuilder.Entity("Erp.Data.Entities.TransformVoucherItem", b =>
                {
                    b.Property<int>("TransformVoucherItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransformVoucherItemId"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("transformVoucherId")
                        .HasColumnType("int");

                    b.HasKey("TransformVoucherItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("transformVoucherId");

                    b.ToTable("transformVoucherItems");
                });

            modelBuilder.Entity("Erp.Data.Entities.Warehouse", b =>
                {
                    b.Property<int>("WarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WarehouseId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WarehouseId");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Name.Data.Entities.UserBase", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Erp.Data.Entities.AccountsModule.PrimaryAccount", b =>
                {
                    b.HasBaseType("Erp.Data.Entities.AccountsModule.Account");

                    b.HasDiscriminator().HasValue("Primary");
                });

            modelBuilder.Entity("Erp.Data.Entities.AccountsModule.SecondaryAccount", b =>
                {
                    b.HasBaseType("Erp.Data.Entities.AccountsModule.Account");

                    b.HasDiscriminator().HasValue("Secondary");
                });

            modelBuilder.Entity("Erp.Data.Entities.AccountsModule.PrimaryCostCenter", b =>
                {
                    b.HasBaseType("Erp.Data.Entities.AccountsModule.CostCenter");

                    b.HasDiscriminator().HasValue("Primary");
                });

            modelBuilder.Entity("Erp.Data.Entities.AccountsModule.SecondaryCostCenter", b =>
                {
                    b.HasBaseType("Erp.Data.Entities.AccountsModule.CostCenter");

                    b.HasDiscriminator().HasValue("Secondary");
                });

            modelBuilder.Entity("Erp.Data.Entities.AccountsModule.Account", b =>
                {
                    b.HasOne("Erp.Data.Entities.AccountsModule.Account", "ParentAccount")
                        .WithMany()
                        .HasForeignKey("ParentAccountID");

                    b.HasOne("Erp.Data.Entities.AccountsModule.PrimaryAccount", null)
                        .WithMany("ChildAccounts")
                        .HasForeignKey("PrimaryAccountAccountID");

                    b.Navigation("ParentAccount");
                });

            modelBuilder.Entity("Erp.Data.Entities.AccountsModule.CostCenter", b =>
                {
                    b.HasOne("Erp.Data.Entities.AccountsModule.CostCenter", "ParentCostCenter")
                        .WithMany()
                        .HasForeignKey("ParentCostCenterID");

                    b.HasOne("Erp.Data.Entities.AccountsModule.PrimaryCostCenter", null)
                        .WithMany("costCenters")
                        .HasForeignKey("PrimaryCostCenterCostCenterId");

                    b.Navigation("ParentCostCenter");
                });

            modelBuilder.Entity("Erp.Data.Entities.AccountsModule.JournalEntryDetail", b =>
                {
                    b.HasOne("Erp.Data.Entities.AccountsModule.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.AccountsModule.SecondaryCostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Erp.Data.Entities.AccountsModule.JournalEntry", "JournalEntry")
                        .WithMany("details")
                        .HasForeignKey("JournalEntryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.AccountsModule.SecondaryAccount", null)
                        .WithMany("journalEntryDetails")
                        .HasForeignKey("SecondaryAccountAccountID");

                    b.HasOne("Erp.Data.Entities.AccountsModule.SecondaryCostCenter", null)
                        .WithMany("journalEntryDetails")
                        .HasForeignKey("SecondaryCostCenterCostCenterId");

                    b.Navigation("Account");

                    b.Navigation("CostCenter");

                    b.Navigation("JournalEntry");
                });

            modelBuilder.Entity("Erp.Data.Entities.DebitNote", b =>
                {
                    b.HasOne("Erp.Data.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Erp.Data.Entities.DebitNoteItem", b =>
                {
                    b.HasOne("Erp.Data.Entities.DebitNote", "debitNote")
                        .WithMany("Items")
                        .HasForeignKey("DebitNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("debitNote");
                });

            modelBuilder.Entity("Erp.Data.Entities.DeliveryVoucher", b =>
                {
                    b.HasOne("Erp.Data.Entities.Warehouse", "Warehouse")
                        .WithMany("deliveryVouchers")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Erp.Data.Entities.DeliveryVoucherItem", b =>
                {
                    b.HasOne("Erp.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.DeliveryVoucher", "deliveryVoucher")
                        .WithMany("deliveryVoucherItems")
                        .HasForeignKey("deliveryVoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("deliveryVoucher");
                });

            modelBuilder.Entity("Erp.Data.Entities.Product", b =>
                {
                    b.HasOne("Erp.Data.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Erp.Data.Entities.PurchaseInvoice", b =>
                {
                    b.HasOne("Erp.Data.Entities.Supplier", "Supplier")
                        .WithMany("PurchaseInvoices")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Erp.Data.Entities.PurchaseInvoiceItem", b =>
                {
                    b.HasOne("Erp.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.PurchaseInvoice", "PurchaseInvoice")
                        .WithMany("Items")
                        .HasForeignKey("PurchaseInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("PurchaseInvoice");
                });

            modelBuilder.Entity("Erp.Data.Entities.PurchaseReturn", b =>
                {
                    b.HasOne("Erp.Data.Entities.Supplier", "supplier")
                        .WithMany()
                        .HasForeignKey("supplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("supplier");
                });

            modelBuilder.Entity("Erp.Data.Entities.PurchaseReturnItem", b =>
                {
                    b.HasOne("Erp.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.PurchaseReturn", "PurchaseReturn")
                        .WithMany("Items")
                        .HasForeignKey("PurchaseReturnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("PurchaseReturn");
                });

            modelBuilder.Entity("Erp.Data.Entities.ReceivingVoucher", b =>
                {
                    b.HasOne("Erp.Data.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.Warehouse", "Warehouse")
                        .WithMany("receivingVouchers")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Erp.Data.Entities.ReceivingVoucherItem", b =>
                {
                    b.HasOne("Erp.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.ReceivingVoucher", "receivingVoucher")
                        .WithMany("receivingVoucherItems")
                        .HasForeignKey("receivingVoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("receivingVoucher");
                });

            modelBuilder.Entity("Erp.Data.Entities.StockTransaction", b =>
                {
                    b.HasOne("Erp.Data.Entities.Product", "Product")
                        .WithMany("StockTransactions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.Warehouse", "Warehouse")
                        .WithMany("StockTransactions")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Erp.Data.Entities.TransformVoucher", b =>
                {
                    b.HasOne("Erp.Data.Entities.Warehouse", "FromWarehouse")
                        .WithMany()
                        .HasForeignKey("FromWarehouseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Erp.Data.Entities.Warehouse", "ToWarehouse")
                        .WithMany()
                        .HasForeignKey("ToWarehouseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("FromWarehouse");

                    b.Navigation("ToWarehouse");
                });

            modelBuilder.Entity("Erp.Data.Entities.TransformVoucherItem", b =>
                {
                    b.HasOne("Erp.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.TransformVoucher", "transformVoucher")
                        .WithMany("TransformItems")
                        .HasForeignKey("transformVoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("transformVoucher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Name.Data.Entities.UserBase", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Name.Data.Entities.UserBase", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Name.Data.Entities.UserBase", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Name.Data.Entities.UserBase", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Erp.Data.Entities.AccountsModule.JournalEntry", b =>
                {
                    b.Navigation("details");
                });

            modelBuilder.Entity("Erp.Data.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Erp.Data.Entities.DebitNote", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Erp.Data.Entities.DeliveryVoucher", b =>
                {
                    b.Navigation("deliveryVoucherItems");
                });

            modelBuilder.Entity("Erp.Data.Entities.Product", b =>
                {
                    b.Navigation("StockTransactions");
                });

            modelBuilder.Entity("Erp.Data.Entities.PurchaseInvoice", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Erp.Data.Entities.PurchaseReturn", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Erp.Data.Entities.ReceivingVoucher", b =>
                {
                    b.Navigation("receivingVoucherItems");
                });

            modelBuilder.Entity("Erp.Data.Entities.Supplier", b =>
                {
                    b.Navigation("PurchaseInvoices");
                });

            modelBuilder.Entity("Erp.Data.Entities.TransformVoucher", b =>
                {
                    b.Navigation("TransformItems");
                });

            modelBuilder.Entity("Erp.Data.Entities.Warehouse", b =>
                {
                    b.Navigation("StockTransactions");

                    b.Navigation("deliveryVouchers");

                    b.Navigation("receivingVouchers");
                });

            modelBuilder.Entity("Erp.Data.Entities.AccountsModule.PrimaryAccount", b =>
                {
                    b.Navigation("ChildAccounts");
                });

            modelBuilder.Entity("Erp.Data.Entities.AccountsModule.SecondaryAccount", b =>
                {
                    b.Navigation("journalEntryDetails");
                });

            modelBuilder.Entity("Erp.Data.Entities.AccountsModule.PrimaryCostCenter", b =>
                {
                    b.Navigation("costCenters");
                });

            modelBuilder.Entity("Erp.Data.Entities.AccountsModule.SecondaryCostCenter", b =>
                {
                    b.Navigation("journalEntryDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
