// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Name.Infrastructure.Data;

#nullable disable

namespace Erp.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationRoleBankAccount", b =>
                {
                    b.Property<int>("BankAccountDepositPermessionsBankAccountID")
                        .HasColumnType("int");

                    b.Property<string>("RolesWhoHaveDepositPermessionsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BankAccountDepositPermessionsBankAccountID", "RolesWhoHaveDepositPermessionsId");

                    b.HasIndex("RolesWhoHaveDepositPermessionsId");

                    b.ToTable("BankAccountDepositRoles", (string)null);
                });

            modelBuilder.Entity("ApplicationRoleBankAccount1", b =>
                {
                    b.Property<int>("BankAccountWithdrawPermessionsBankAccountID")
                        .HasColumnType("int");

                    b.Property<string>("RolesWhoHaveWithdrawPermessionsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BankAccountWithdrawPermessionsBankAccountID", "RolesWhoHaveWithdrawPermessionsId");

                    b.HasIndex("RolesWhoHaveWithdrawPermessionsId");

                    b.ToTable("BankAccountWithdrawRoles", (string)null);
                });

            modelBuilder.Entity("ApplicationRoleTreasury", b =>
                {
                    b.Property<string>("RolesWhoHaveDepositPermessionsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TreasuryDepositPermessionsId")
                        .HasColumnType("int");

                    b.HasKey("RolesWhoHaveDepositPermessionsId", "TreasuryDepositPermessionsId");

                    b.HasIndex("TreasuryDepositPermessionsId");

                    b.ToTable("TreasuryRoleDeposit", (string)null);
                });

            modelBuilder.Entity("ApplicationRoleTreasury1", b =>
                {
                    b.Property<string>("RolesWhoHaveWithdrawPermessionsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TreasuryWithdrawPermessionsId")
                        .HasColumnType("int");

                    b.HasKey("RolesWhoHaveWithdrawPermessionsId", "TreasuryWithdrawPermessionsId");

                    b.HasIndex("TreasuryWithdrawPermessionsId");

                    b.ToTable("TreasuryRoleWithdraw", (string)null);
                });

            modelBuilder.Entity("BankAccountEmployee", b =>
                {
                    b.Property<int>("BankAccountDepositPermessionsBankAccountID")
                        .HasColumnType("int");

                    b.Property<int>("employeesWhoHaveDepositPermessionsEmployeeID")
                        .HasColumnType("int");

                    b.HasKey("BankAccountDepositPermessionsBankAccountID", "employeesWhoHaveDepositPermessionsEmployeeID");

                    b.HasIndex("employeesWhoHaveDepositPermessionsEmployeeID");

                    b.ToTable("BankAccountEmployeeDeposit", (string)null);
                });

            modelBuilder.Entity("BankAccountEmployee1", b =>
                {
                    b.Property<int>("BankAccountWithdrawPermessionsBankAccountID")
                        .HasColumnType("int");

                    b.Property<int>("employeesWhoHaveWithdrawPermessionsEmployeeID")
                        .HasColumnType("int");

                    b.HasKey("BankAccountWithdrawPermessionsBankAccountID", "employeesWhoHaveWithdrawPermessionsEmployeeID");

                    b.HasIndex("employeesWhoHaveWithdrawPermessionsEmployeeID");

                    b.ToTable("BankAccountEmployeeWithdraw", (string)null);
                });

            modelBuilder.Entity("EmployeeTreasury", b =>
                {
                    b.Property<int>("TreasuryDepositPermessionsId")
                        .HasColumnType("int");

                    b.Property<int>("employeesWhoHaveDepositPermessionsEmployeeID")
                        .HasColumnType("int");

                    b.HasKey("TreasuryDepositPermessionsId", "employeesWhoHaveDepositPermessionsEmployeeID");

                    b.HasIndex("employeesWhoHaveDepositPermessionsEmployeeID");

                    b.ToTable("TreasuryEmployeeDeposit", (string)null);
                });

            modelBuilder.Entity("EmployeeTreasury1", b =>
                {
                    b.Property<int>("TreasuryWithdrawPermessionsId")
                        .HasColumnType("int");

                    b.Property<int>("employeesWhoHaveWithdrawPermessionsEmployeeID")
                        .HasColumnType("int");

                    b.HasKey("TreasuryWithdrawPermessionsId", "employeesWhoHaveWithdrawPermessionsEmployeeID");

                    b.HasIndex("employeesWhoHaveWithdrawPermessionsEmployeeID");

                    b.ToTable("TreasuryEmployeeWithdraw", (string)null);
                });

            modelBuilder.Entity("Erp.Data.Entities.AccountsModule.Account", b =>
                {
                    b.Property<int>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountID"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentAccountID")
                        .HasColumnType("int");

                    b.Property<int?>("PrimaryAccountAccountID")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("AccountID");

                    b.HasIndex("ParentAccountID");

                    b.HasIndex("PrimaryAccountAccountID");

                    b.ToTable("Accounts");

                    b.HasDiscriminator<string>("AccountType").HasValue("Account");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Erp.Data.Entities.AccountsModule.CostCenter", b =>
                {
                    b.Property<int>("CostCenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CostCenterId"));

                    b.Property<string>("CostCenterType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentCostCenterID")
                        .HasColumnType("int");

                    b.Property<int?>("PrimaryCostCenterCostCenterId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CostCenterId");

                    b.HasIndex("ParentCostCenterID");

                    b.HasIndex("PrimaryCostCenterCostCenterId");

                    b.ToTable("costCenters");

                    b.HasDiscriminator<string>("CostCenterType").HasValue("CostCenter");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Erp.Data.Entities.AccountsModule.JournalEntry", b =>
                {
                    b.Property<int>("JournalEntryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JournalEntryID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JournalEntryID");

                    b.ToTable("journalEntries");
                });

            modelBuilder.Entity("Erp.Data.Entities.AccountsModule.JournalEntryDetail", b =>
                {
                    b.Property<int>("JournalEntryDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JournalEntryDetailID"));

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<int?>("CostCenterId")
                        .HasColumnType("int");

                    b.Property<decimal>("Credit")
                        .HasColumnType("decimal(15, 2)");

                    b.Property<decimal>("Debit")
                        .HasColumnType("decimal(15, 2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JournalEntryID")
                        .HasColumnType("int");

                    b.Property<int?>("SecondaryAccountAccountID")
                        .HasColumnType("int");

                    b.Property<int?>("SecondaryCostCenterCostCenterId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JournalEntryDetailID");

                    b.HasIndex("AccountID");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("JournalEntryID");

                    b.HasIndex("SecondaryAccountAccountID");

                    b.HasIndex("SecondaryCostCenterCostCenterId");

                    b.ToTable("journalEntryDetails");
                });

            modelBuilder.Entity("Erp.Data.Entities.CustomersModule.ContactList", b =>
                {
                    b.Property<int>("ContactListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactListId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Landline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactListId");

                    b.HasIndex("CustomerId");

                    b.ToTable("contactLists");
                });

            modelBuilder.Entity("Erp.Data.Entities.CustomersModule.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClassificationId")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Landline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("billingMethod")
                        .HasColumnType("int");

                    b.Property<string>("postcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("zone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.HasIndex("AccountId");

                    b.HasIndex("ClassificationId");

                    b.ToTable("Customers");

                    b.HasDiscriminator<string>("CustomerType").HasValue("Customer");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Erp.Data.Entities.CustomersModule.CustomerClassification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("customerClassifications");
                });

            modelBuilder.Entity("Erp.Data.Entities.ExpenseCostCenter", b =>
                {
                    b.Property<int>("ExpenseId")
                        .HasColumnType("int");

                    b.Property<int>("CostCenterId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ExpenseId", "CostCenterId");

                    b.HasIndex("CostCenterId");

                    b.ToTable("ExpenseCostCenter");
                });

            modelBuilder.Entity("Erp.Data.Entities.Finance.BankAccount", b =>
                {
                    b.Property<int>("BankAccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BankAccountID"));

                    b.Property<string>("AccountHolderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<int>("DepositPermission")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WithdrawPermission")
                        .HasColumnType("int");

                    b.HasKey("BankAccountID");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("Erp.Data.Entities.Finance.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CodeNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsMultiAccount")
                        .HasColumnType("bit");

                    b.Property<bool>("Isfrequent")
                        .HasColumnType("bit");

                    b.Property<int>("SubAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TreasuryId")
                        .HasColumnType("int");

                    b.Property<bool>("WithCostCenter")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("SubAccountId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TreasuryId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("Erp.Data.Entities.Finance.ExpenseCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ExpenseCategories");
                });

            modelBuilder.Entity("Erp.Data.Entities.Finance.MultiAccReceiptItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CostCenterId")
                        .HasColumnType("int");

                    b.Property<int>("SecondaryAccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("receiptId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("SecondaryAccountId");

                    b.HasIndex("receiptId");

                    b.ToTable("multiAccReceiptItems");
                });

            modelBuilder.Entity("Erp.Data.Entities.Finance.Receipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CodeNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsMultiAccount")
                        .HasColumnType("bit");

                    b.Property<bool>("Isfrequent")
                        .HasColumnType("bit");

                    b.Property<int>("SubAccountId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TreasuryId")
                        .HasColumnType("int");

                    b.Property<bool>("WithCostCenter")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("SubAccountId");

                    b.HasIndex("TreasuryId");

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("Erp.Data.Entities.Finance.ReceiptCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ReceiptId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiptId");

                    b.ToTable("ReceiptCategories");
                });

            modelBuilder.Entity("Erp.Data.Entities.Finance.ReceiptCostCenter", b =>
                {
                    b.Property<int>("ReceiptId")
                        .HasColumnType("int");

                    b.Property<int>("CostCenterId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ReceiptId", "CostCenterId");

                    b.HasIndex("CostCenterId");

                    b.ToTable("ReceiptCostCenter");
                });

            modelBuilder.Entity("Erp.Data.Entities.Finance.Treasury", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepositPermission")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WithdrawPermission")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Treasuries");
                });

            modelBuilder.Entity("Erp.Data.Entities.HumanResources.OrganizationalStructure.Department", b =>
                {
                    b.Property<int>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentID"));

                    b.Property<string>("AbbreviationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepartmentHeadID")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentID");

                    b.HasIndex("DepartmentHeadID");

                    b.ToTable("departments");
                });

            modelBuilder.Entity("Erp.Data.Entities.HumanResources.OrganizationalStructure.EmploymentLevel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("employmentLevels");
                });

            modelBuilder.Entity("Erp.Data.Entities.HumanResources.OrganizationalStructure.EmploymentType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("employmentTypes");
                });

            modelBuilder.Entity("Erp.Data.Entities.HumanResources.OrganizationalStructure.JobType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("DepartmentId");

                    b.ToTable("jobTypes");
                });

            modelBuilder.Entity("Erp.Data.Entities.HumanResources.Staff.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Erp.Data.Entities.HumanResources.Staff.Employee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeID"));

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<int?>("DirectManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmploymentLevelId")
                        .HasColumnType("int");

                    b.Property<int?>("EmploymentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("JobTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Landline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PrivateEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UseDefaultFinancialHistory")
                        .HasColumnType("bit");

                    b.Property<string>("postcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("zone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("DirectManagerId");

                    b.HasIndex("EmploymentLevelId");

                    b.HasIndex("EmploymentTypeId");

                    b.HasIndex("JobTypeID");

                    b.HasIndex("RoleID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Erp.Data.Entities.InventoryModule.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MainCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductAndServiceBaseProductId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.HasIndex("MainCategoryId");

                    b.HasIndex("ProductAndServiceBaseProductId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Erp.Data.Entities.InventoryModule.DeliveryVoucher", b =>
                {
                    b.Property<int>("DeliveryVoucherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryVoucherId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VoucherStatusId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("DeliveryVoucherId");

                    b.HasIndex("AccountId");

                    b.HasIndex("VoucherStatusId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("DeliveryVouchers");
                });

            modelBuilder.Entity("Erp.Data.Entities.InventoryModule.DeliveryVoucherItem", b =>
                {
                    b.Property<int>("DeliveryVoucherItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryVoucherItemId"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("deliveryVoucherId")
                        .HasColumnType("int");

                    b.HasKey("DeliveryVoucherItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("deliveryVoucherId");

                    b.ToTable("deliveryVoucherItems");
                });

            modelBuilder.Entity("Erp.Data.Entities.InventoryModule.PriceList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("priceLists");
                });

            modelBuilder.Entity("Erp.Data.Entities.InventoryModule.PriceListItem", b =>
                {
                    b.Property<int>("PriceListId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("SellPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PriceListId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("priceListItems");
                });

            modelBuilder.Entity("Erp.Data.Entities.InventoryModule.ProductAndServiceBase", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("LowestSellingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductOrService")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SellPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("productAndServiceBases");

                    b.HasDiscriminator<string>("ProductOrService").HasValue("ProductAndServiceBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Erp.Data.Entities.InventoryModule.ReceivingVoucher", b =>
                {
                    b.Property<int>("ReceivingVoucherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceivingVoucherId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReceivingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VoucherStatusId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("ReceivingVoucherId");

                    b.HasIndex("AccountId");

                    b.HasIndex("VoucherStatusId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("ReceivingVouchers");
                });

            modelBuilder.Entity("Erp.Data.Entities.InventoryModule.ReceivingVoucherItem", b =>
                {
                    b.Property<int>("ReceivingVoucherItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceivingVoucherItemId"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("receivingVoucherId")
                        .HasColumnType("int");

                    b.HasKey("ReceivingVoucherItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("receivingVoucherId");

                    b.ToTable("receivingVoucherItems");
                });

            modelBuilder.Entity("Erp.Data.Entities.InventoryModule.StockTaking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("stockTakings");
                });

            modelBuilder.Entity("Erp.Data.Entities.InventoryModule.StockTakingItem", b =>
                {
                    b.Property<int>("StockTakingId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("DecreaseAndExcess")
                        .HasColumnType("int");

                    b.Property<int>("NumberIStock")
                        .HasColumnType("int");

                    b.Property<int>("NumberInProgram")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StockTakingId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("stockTakingItems");
                });

            modelBuilder.Entity("Erp.Data.Entities.InventoryModule.StockTransaction", b =>
                {
                    b.Property<int>("StockTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockTransactionId"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("StockTransactionId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("StockTransactions");
                });

            modelBuilder.Entity("Erp.Data.Entities.InventoryModule.TransformVoucher", b =>
                {
                    b.Property<int>("TransformVoucherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransformVoucherId"));

                    b.Property<int>("FromWarehouseId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ToWarehouseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransformDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TransformVoucherId");

                    b.HasIndex("FromWarehouseId");

                    b.HasIndex("ToWarehouseId");

                    b.ToTable("transformVouchers");
                });

            modelBuilder.Entity("Erp.Data.Entities.InventoryModule.TransformVoucherItem", b =>
                {
                    b.Property<int>("TransformVoucherItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransformVoucherItemId"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("transformVoucherId")
                        .HasColumnType("int");

                    b.HasKey("TransformVoucherItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("transformVoucherId");

                    b.ToTable("transformVoucherItems");
                });

            modelBuilder.Entity("Erp.Data.Entities.InventoryModule.VoucherStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("voucherStatuses");
                });

            modelBuilder.Entity("Erp.Data.Entities.InventoryModule.Warehouse", b =>
                {
                    b.Property<int>("WarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WarehouseId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WarehouseId");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("Erp.Data.Entities.MainModule.Company", b =>
                {
                    b.Property<int>("CompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyID"));

                    b.Property<string>("CompanyAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Domain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyID");

                    b.ToTable("companies");
                });

            modelBuilder.Entity("Erp.Data.Entities.MainModule.CompanyModule", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("CompanyId", "ModuleId");

                    b.HasIndex("ModuleId");

                    b.ToTable("companyModules");
                });

            modelBuilder.Entity("Erp.Data.Entities.MainModule.CompanySubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("companySubscriptions");
                });

            modelBuilder.Entity("Erp.Data.Entities.MainModule.Module", b =>
                {
                    b.Property<int>("ModuleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModuleID"));

                    b.Property<string>("ClaimList")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ModuleID");

                    b.ToTable("modules");
                });

            modelBuilder.Entity("Erp.Data.Entities.MainModule.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("subscriptions");
                });

            modelBuilder.Entity("Erp.Data.Entities.MainModule.UserBase", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Erp.Data.Entities.MultiAccExpenseItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CostCenterId")
                        .HasColumnType("int");

                    b.Property<int>("ExpenseId")
                        .HasColumnType("int");

                    b.Property<int>("SecondaryAccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("ExpenseId");

                    b.HasIndex("SecondaryAccountId");

                    b.ToTable("multiAccExpenseItems");
                });

            modelBuilder.Entity("Erp.Data.Entities.PurchasesModule.DebitNote", b =>
                {
                    b.Property<int>("DebitNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DebitNoteId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("JournalEntryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("NoteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DebitNoteId");

                    b.HasIndex("JournalEntryID");

                    b.HasIndex("SupplierId");

                    b.ToTable("DebitNotes");
                });

            modelBuilder.Entity("Erp.Data.Entities.PurchasesModule.DebitNoteItem", b =>
                {
                    b.Property<int>("DebitNoteItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DebitNoteItemId"));

                    b.Property<int>("DebitNoteId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("discount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("DebitNoteItemId");

                    b.HasIndex("DebitNoteId");

                    b.HasIndex("ProductId");

                    b.ToTable("DebitNoteItems");
                });

            modelBuilder.Entity("Erp.Data.Entities.PurchasesModule.PurchaseInoviceSettings", b =>
                {
                    b.Property<int>("PurchaseInoviceSettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseInoviceSettingsId"));

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PurchaseInoviceSettingsId");

                    b.ToTable("purchaseInoviceSettings");
                });

            modelBuilder.Entity("Erp.Data.Entities.PurchasesModule.PurchaseInvoice", b =>
                {
                    b.Property<int>("PurchaseInvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseInvoiceId"));

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<int>("JournalEntryID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("numberOfDaysToPay")
                        .HasColumnType("int");

                    b.HasKey("PurchaseInvoiceId");

                    b.HasIndex("JournalEntryID");

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchaseInvoices");
                });

            modelBuilder.Entity("Erp.Data.Entities.PurchasesModule.PurchaseInvoiceItem", b =>
                {
                    b.Property<int>("PurchaseInvoiceItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseInvoiceItemId"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseInvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("discount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PurchaseInvoiceItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseInvoiceId");

                    b.ToTable("PurchaseInvoiceItems");
                });

            modelBuilder.Entity("Erp.Data.Entities.PurchasesModule.PurchaseReturn", b =>
                {
                    b.Property<int>("PurchaseReturnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseReturnId"));

                    b.Property<int>("JournalEntryID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("supplierId")
                        .HasColumnType("int");

                    b.HasKey("PurchaseReturnId");

                    b.HasIndex("JournalEntryID");

                    b.HasIndex("supplierId");

                    b.ToTable("PurchaseReturns");
                });

            modelBuilder.Entity("Erp.Data.Entities.PurchasesModule.PurchaseReturnItem", b =>
                {
                    b.Property<int>("PurchaseReturnItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseReturnItemId"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseReturnId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("discount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PurchaseReturnItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseReturnId");

                    b.ToTable("PurchaseReturnItems");
                });

            modelBuilder.Entity("Erp.Data.Entities.PurchasesModule.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierId");

                    b.HasIndex("AccountId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Erp.Data.Entities.SalesModule.CreditNote", b =>
                {
                    b.Property<int>("CreditNoteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CreditNoteID"));

                    b.Property<DateTime>("CreditNoteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CreditNoteID");

                    b.HasIndex("CustomerID");

                    b.ToTable("CreditNotes");
                });

            modelBuilder.Entity("Erp.Data.Entities.SalesModule.CreditNoteItem", b =>
                {
                    b.Property<int>("CreditNoteItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CreditNoteItemID"));

                    b.Property<int>("CreditNoteID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("productID")
                        .HasColumnType("int");

                    b.HasKey("CreditNoteItemID");

                    b.HasIndex("CreditNoteID");

                    b.HasIndex("productID");

                    b.ToTable("creditNoteItems");
                });

            modelBuilder.Entity("Erp.Data.Entities.SalesModule.CustomerPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("IDNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("CustomerPayments");
                });

            modelBuilder.Entity("Erp.Data.Entities.SalesModule.Invoice", b =>
                {
                    b.Property<int>("InvoiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceID"));

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentTerms")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("InvoiceID");

                    b.HasIndex("CustomerID");

                    b.ToTable("invoices");
                });

            modelBuilder.Entity("Erp.Data.Entities.SalesModule.InvoiceItem", b =>
                {
                    b.Property<int>("InvoiceItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceItemID"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("InvoiceID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("productID")
                        .HasColumnType("int");

                    b.HasKey("InvoiceItemID");

                    b.HasIndex("InvoiceID");

                    b.HasIndex("productID");

                    b.ToTable("InvoiceItems");
                });

            modelBuilder.Entity("Erp.Data.Entities.SalesModule.Quotation", b =>
                {
                    b.Property<int>("QuotationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuotationId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("QuoteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("QuotationId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Quotations");
                });

            modelBuilder.Entity("Erp.Data.Entities.SalesModule.QuotationItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("QuotationId")
                        .HasColumnType("int");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("QuotationId");

                    b.ToTable("QuotationItems");
                });

            modelBuilder.Entity("Erp.Data.Entities.SalesModule.RecurringInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("DisplayRange")
                        .HasColumnType("bit");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("IssueEvery")
                        .HasColumnType("int");

                    b.Property<DateTime>("NextInvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RecurringInvoiceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("automaticPayment")
                        .HasColumnType("bit");

                    b.Property<bool>("sendEmail")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("RecurringInvoices");
                });

            modelBuilder.Entity("Erp.Data.Entities.SalesModule.RecurringInvoiceItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RInvoiceID")
                        .HasColumnType("int");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("productID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RInvoiceID");

                    b.HasIndex("productID");

                    b.ToTable("recurringInvoiceItems");
                });

            modelBuilder.Entity("ExpenseExpenseCategory", b =>
                {
                    b.Property<int>("ExpensesId")
                        .HasColumnType("int");

                    b.Property<int>("expenseCategoriesId")
                        .HasColumnType("int");

                    b.HasKey("ExpensesId", "expenseCategoriesId");

                    b.HasIndex("expenseCategoriesId");

                    b.ToTable("ExpenseExpenseCategory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Erp.Data.Entities.AccountsModule.PrimaryAccount", b =>
                {
                    b.HasBaseType("Erp.Data.Entities.AccountsModule.Account");

                    b.HasDiscriminator().HasValue("Primary");
                });

            modelBuilder.Entity("Erp.Data.Entities.AccountsModule.SecondaryAccount", b =>
                {
                    b.HasBaseType("Erp.Data.Entities.AccountsModule.Account");

                    b.HasDiscriminator().HasValue("Secondary");
                });

            modelBuilder.Entity("Erp.Data.Entities.AccountsModule.PrimaryCostCenter", b =>
                {
                    b.HasBaseType("Erp.Data.Entities.AccountsModule.CostCenter");

                    b.HasDiscriminator().HasValue("Primary");
                });

            modelBuilder.Entity("Erp.Data.Entities.AccountsModule.SecondaryCostCenter", b =>
                {
                    b.HasBaseType("Erp.Data.Entities.AccountsModule.CostCenter");

                    b.HasDiscriminator().HasValue("Secondary");
                });

            modelBuilder.Entity("Erp.Data.Entities.CustomersModule.CommercialCustomer", b =>
                {
                    b.HasBaseType("Erp.Data.Entities.CustomersModule.Customer");

                    b.Property<string>("CommercialName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Commercialregister")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxCard")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Commercial");
                });

            modelBuilder.Entity("Erp.Data.Entities.CustomersModule.IndividualCustomer", b =>
                {
                    b.HasBaseType("Erp.Data.Entities.CustomersModule.Customer");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Individual");
                });

            modelBuilder.Entity("Erp.Data.Entities.InventoryModule.Product", b =>
                {
                    b.HasBaseType("Erp.Data.Entities.InventoryModule.ProductAndServiceBase");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("MinAmountBeforNotefy")
                        .HasColumnType("int");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<bool>("TrackInventory")
                        .HasColumnType("bit");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SupplierId");

                    b.HasDiscriminator().HasValue("Product");
                });

            modelBuilder.Entity("Erp.Data.Entities.InventoryModule.Service", b =>
                {
                    b.HasBaseType("Erp.Data.Entities.InventoryModule.ProductAndServiceBase");

                    b.HasDiscriminator().HasValue("Service");
                });

            modelBuilder.Entity("ApplicationRoleBankAccount", b =>
                {
                    b.HasOne("Erp.Data.Entities.Finance.BankAccount", null)
                        .WithMany()
                        .HasForeignKey("BankAccountDepositPermessionsBankAccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.HumanResources.Staff.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RolesWhoHaveDepositPermessionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationRoleBankAccount1", b =>
                {
                    b.HasOne("Erp.Data.Entities.Finance.BankAccount", null)
                        .WithMany()
                        .HasForeignKey("BankAccountWithdrawPermessionsBankAccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.HumanResources.Staff.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RolesWhoHaveWithdrawPermessionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationRoleTreasury", b =>
                {
                    b.HasOne("Erp.Data.Entities.HumanResources.Staff.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RolesWhoHaveDepositPermessionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.Finance.Treasury", null)
                        .WithMany()
                        .HasForeignKey("TreasuryDepositPermessionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationRoleTreasury1", b =>
                {
                    b.HasOne("Erp.Data.Entities.HumanResources.Staff.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RolesWhoHaveWithdrawPermessionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.Finance.Treasury", null)
                        .WithMany()
                        .HasForeignKey("TreasuryWithdrawPermessionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BankAccountEmployee", b =>
                {
                    b.HasOne("Erp.Data.Entities.Finance.BankAccount", null)
                        .WithMany()
                        .HasForeignKey("BankAccountDepositPermessionsBankAccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.HumanResources.Staff.Employee", null)
                        .WithMany()
                        .HasForeignKey("employeesWhoHaveDepositPermessionsEmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BankAccountEmployee1", b =>
                {
                    b.HasOne("Erp.Data.Entities.Finance.BankAccount", null)
                        .WithMany()
                        .HasForeignKey("BankAccountWithdrawPermessionsBankAccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.HumanResources.Staff.Employee", null)
                        .WithMany()
                        .HasForeignKey("employeesWhoHaveWithdrawPermessionsEmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmployeeTreasury", b =>
                {
                    b.HasOne("Erp.Data.Entities.Finance.Treasury", null)
                        .WithMany()
                        .HasForeignKey("TreasuryDepositPermessionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.HumanResources.Staff.Employee", null)
                        .WithMany()
                        .HasForeignKey("employeesWhoHaveDepositPermessionsEmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmployeeTreasury1", b =>
                {
                    b.HasOne("Erp.Data.Entities.Finance.Treasury", null)
                        .WithMany()
                        .HasForeignKey("TreasuryWithdrawPermessionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.HumanResources.Staff.Employee", null)
                        .WithMany()
                        .HasForeignKey("employeesWhoHaveWithdrawPermessionsEmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Erp.Data.Entities.AccountsModule.Account", b =>
                {
                    b.HasOne("Erp.Data.Entities.AccountsModule.Account", "ParentAccount")
                        .WithMany()
                        .HasForeignKey("ParentAccountID");

                    b.HasOne("Erp.Data.Entities.AccountsModule.PrimaryAccount", null)
                        .WithMany("ChildAccounts")
                        .HasForeignKey("PrimaryAccountAccountID");

                    b.Navigation("ParentAccount");
                });

            modelBuilder.Entity("Erp.Data.Entities.AccountsModule.CostCenter", b =>
                {
                    b.HasOne("Erp.Data.Entities.AccountsModule.CostCenter", "ParentCostCenter")
                        .WithMany()
                        .HasForeignKey("ParentCostCenterID");

                    b.HasOne("Erp.Data.Entities.AccountsModule.PrimaryCostCenter", null)
                        .WithMany("costCenters")
                        .HasForeignKey("PrimaryCostCenterCostCenterId");

                    b.Navigation("ParentCostCenter");
                });

            modelBuilder.Entity("Erp.Data.Entities.AccountsModule.JournalEntryDetail", b =>
                {
                    b.HasOne("Erp.Data.Entities.AccountsModule.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.AccountsModule.SecondaryCostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Erp.Data.Entities.AccountsModule.JournalEntry", "JournalEntry")
                        .WithMany("details")
                        .HasForeignKey("JournalEntryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.AccountsModule.SecondaryAccount", null)
                        .WithMany("journalEntryDetails")
                        .HasForeignKey("SecondaryAccountAccountID");

                    b.HasOne("Erp.Data.Entities.AccountsModule.SecondaryCostCenter", null)
                        .WithMany("journalEntryDetails")
                        .HasForeignKey("SecondaryCostCenterCostCenterId");

                    b.Navigation("Account");

                    b.Navigation("CostCenter");

                    b.Navigation("JournalEntry");
                });

            modelBuilder.Entity("Erp.Data.Entities.CustomersModule.ContactList", b =>
                {
                    b.HasOne("Erp.Data.Entities.CustomersModule.Customer", "Customer")
                        .WithMany("ContactLists")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Erp.Data.Entities.CustomersModule.Customer", b =>
                {
                    b.HasOne("Erp.Data.Entities.AccountsModule.SecondaryAccount", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.CustomersModule.CustomerClassification", "Classification")
                        .WithMany()
                        .HasForeignKey("ClassificationId");

                    b.Navigation("Account");

                    b.Navigation("Classification");
                });

            modelBuilder.Entity("Erp.Data.Entities.ExpenseCostCenter", b =>
                {
                    b.HasOne("Erp.Data.Entities.AccountsModule.CostCenter", "CostCenter")
                        .WithMany("ExpenseCostCenters")
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.Finance.Expense", "Expense")
                        .WithMany("ExpenseCostCenters")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CostCenter");

                    b.Navigation("Expense");
                });

            modelBuilder.Entity("Erp.Data.Entities.Finance.Expense", b =>
                {
                    b.HasOne("Erp.Data.Entities.AccountsModule.Account", "SubAccount")
                        .WithMany("expenses")
                        .HasForeignKey("SubAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.PurchasesModule.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.HasOne("Erp.Data.Entities.Finance.Treasury", "Treasury")
                        .WithMany()
                        .HasForeignKey("TreasuryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubAccount");

                    b.Navigation("Supplier");

                    b.Navigation("Treasury");
                });

            modelBuilder.Entity("Erp.Data.Entities.Finance.MultiAccReceiptItem", b =>
                {
                    b.HasOne("Erp.Data.Entities.AccountsModule.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId");

                    b.HasOne("Erp.Data.Entities.AccountsModule.SecondaryAccount", "SecondaryAccount")
                        .WithMany()
                        .HasForeignKey("SecondaryAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.Finance.Receipt", "receipt")
                        .WithMany("multiAccReceiptItems")
                        .HasForeignKey("receiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CostCenter");

                    b.Navigation("SecondaryAccount");

                    b.Navigation("receipt");
                });

            modelBuilder.Entity("Erp.Data.Entities.Finance.Receipt", b =>
                {
                    b.HasOne("Erp.Data.Entities.AccountsModule.Account", "SubAccount")
                        .WithMany("receipts")
                        .HasForeignKey("SubAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.Finance.Treasury", "Treasury")
                        .WithMany()
                        .HasForeignKey("TreasuryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubAccount");

                    b.Navigation("Treasury");
                });

            modelBuilder.Entity("Erp.Data.Entities.Finance.ReceiptCategory", b =>
                {
                    b.HasOne("Erp.Data.Entities.Finance.Receipt", null)
                        .WithMany("receiptCategories")
                        .HasForeignKey("ReceiptId");
                });

            modelBuilder.Entity("Erp.Data.Entities.Finance.ReceiptCostCenter", b =>
                {
                    b.HasOne("Erp.Data.Entities.AccountsModule.CostCenter", "CostCenter")
                        .WithMany("ReceiptCostCenters")
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.Finance.Receipt", "receipt")
                        .WithMany("ReceiptCostCenters")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CostCenter");

                    b.Navigation("receipt");
                });

            modelBuilder.Entity("Erp.Data.Entities.HumanResources.OrganizationalStructure.Department", b =>
                {
                    b.HasOne("Erp.Data.Entities.HumanResources.Staff.Employee", "DepartmentHead")
                        .WithMany()
                        .HasForeignKey("DepartmentHeadID");

                    b.Navigation("DepartmentHead");
                });

            modelBuilder.Entity("Erp.Data.Entities.HumanResources.OrganizationalStructure.JobType", b =>
                {
                    b.HasOne("Erp.Data.Entities.HumanResources.OrganizationalStructure.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Erp.Data.Entities.HumanResources.Staff.Employee", b =>
                {
                    b.HasOne("Erp.Data.Entities.HumanResources.OrganizationalStructure.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID");

                    b.HasOne("Erp.Data.Entities.HumanResources.Staff.Employee", "DirectManager")
                        .WithMany()
                        .HasForeignKey("DirectManagerId");

                    b.HasOne("Erp.Data.Entities.HumanResources.OrganizationalStructure.EmploymentLevel", "EmploymentLevel")
                        .WithMany()
                        .HasForeignKey("EmploymentLevelId");

                    b.HasOne("Erp.Data.Entities.HumanResources.OrganizationalStructure.EmploymentType", "EmploymentType")
                        .WithMany()
                        .HasForeignKey("EmploymentTypeId");

                    b.HasOne("Erp.Data.Entities.HumanResources.OrganizationalStructure.JobType", "JobType")
                        .WithMany()
                        .HasForeignKey("JobTypeID");

                    b.HasOne("Erp.Data.Entities.HumanResources.Staff.ApplicationRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("DirectManager");

                    b.Navigation("EmploymentLevel");

                    b.Navigation("EmploymentType");

                    b.Navigation("JobType");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Erp.Data.Entities.InventoryModule.Category", b =>
                {
                    b.HasOne("Erp.Data.Entities.InventoryModule.Category", "MainCategory")
                        .WithMany()
                        .HasForeignKey("MainCategoryId");

                    b.HasOne("Erp.Data.Entities.InventoryModule.ProductAndServiceBase", null)
                        .WithMany("categories")
                        .HasForeignKey("ProductAndServiceBaseProductId");

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("Erp.Data.Entities.InventoryModule.DeliveryVoucher", b =>
                {
                    b.HasOne("Erp.Data.Entities.AccountsModule.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.InventoryModule.VoucherStatus", "VoucherStatus")
                        .WithMany()
                        .HasForeignKey("VoucherStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.InventoryModule.Warehouse", "Warehouse")
                        .WithMany("deliveryVouchers")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("VoucherStatus");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Erp.Data.Entities.InventoryModule.DeliveryVoucherItem", b =>
                {
                    b.HasOne("Erp.Data.Entities.InventoryModule.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.InventoryModule.DeliveryVoucher", "deliveryVoucher")
                        .WithMany("deliveryVoucherItems")
                        .HasForeignKey("deliveryVoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("deliveryVoucher");
                });

            modelBuilder.Entity("Erp.Data.Entities.InventoryModule.PriceListItem", b =>
                {
                    b.HasOne("Erp.Data.Entities.InventoryModule.PriceList", "PriceList")
                        .WithMany("priceListItems")
                        .HasForeignKey("PriceListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.InventoryModule.ProductAndServiceBase", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PriceList");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Erp.Data.Entities.InventoryModule.ReceivingVoucher", b =>
                {
                    b.HasOne("Erp.Data.Entities.AccountsModule.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.InventoryModule.VoucherStatus", "VoucherStatus")
                        .WithMany()
                        .HasForeignKey("VoucherStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.InventoryModule.Warehouse", "Warehouse")
                        .WithMany("receivingVouchers")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("VoucherStatus");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Erp.Data.Entities.InventoryModule.ReceivingVoucherItem", b =>
                {
                    b.HasOne("Erp.Data.Entities.InventoryModule.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.InventoryModule.ReceivingVoucher", "receivingVoucher")
                        .WithMany("receivingVoucherItems")
                        .HasForeignKey("receivingVoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("receivingVoucher");
                });

            modelBuilder.Entity("Erp.Data.Entities.InventoryModule.StockTakingItem", b =>
                {
                    b.HasOne("Erp.Data.Entities.InventoryModule.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.InventoryModule.StockTaking", "StockTaking")
                        .WithMany("stockTakingItems")
                        .HasForeignKey("StockTakingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("StockTaking");
                });

            modelBuilder.Entity("Erp.Data.Entities.InventoryModule.StockTransaction", b =>
                {
                    b.HasOne("Erp.Data.Entities.InventoryModule.ProductAndServiceBase", "Product")
                        .WithMany("StockTransactions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.InventoryModule.Warehouse", "Warehouse")
                        .WithMany("StockTransactions")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Erp.Data.Entities.InventoryModule.TransformVoucher", b =>
                {
                    b.HasOne("Erp.Data.Entities.InventoryModule.Warehouse", "FromWarehouse")
                        .WithMany()
                        .HasForeignKey("FromWarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.InventoryModule.Warehouse", "ToWarehouse")
                        .WithMany()
                        .HasForeignKey("ToWarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromWarehouse");

                    b.Navigation("ToWarehouse");
                });

            modelBuilder.Entity("Erp.Data.Entities.InventoryModule.TransformVoucherItem", b =>
                {
                    b.HasOne("Erp.Data.Entities.InventoryModule.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.InventoryModule.TransformVoucher", "transformVoucher")
                        .WithMany("TransformItems")
                        .HasForeignKey("transformVoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("transformVoucher");
                });

            modelBuilder.Entity("Erp.Data.Entities.MainModule.CompanyModule", b =>
                {
                    b.HasOne("Erp.Data.Entities.MainModule.Company", "Company")
                        .WithMany("companyModules")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.MainModule.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Erp.Data.Entities.MainModule.CompanySubscription", b =>
                {
                    b.HasOne("Erp.Data.Entities.MainModule.Company", "Company")
                        .WithMany("companySubscriptions")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.MainModule.Subscription", "Subscription")
                        .WithMany("companySubscriptions")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Erp.Data.Entities.MainModule.UserBase", b =>
                {
                    b.HasOne("Erp.Data.Entities.MainModule.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Erp.Data.Entities.MultiAccExpenseItem", b =>
                {
                    b.HasOne("Erp.Data.Entities.AccountsModule.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId");

                    b.HasOne("Erp.Data.Entities.Finance.Expense", "Expense")
                        .WithMany("multiAccExpenseItems")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.AccountsModule.SecondaryAccount", "SecondaryAccount")
                        .WithMany()
                        .HasForeignKey("SecondaryAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CostCenter");

                    b.Navigation("Expense");

                    b.Navigation("SecondaryAccount");
                });

            modelBuilder.Entity("Erp.Data.Entities.PurchasesModule.DebitNote", b =>
                {
                    b.HasOne("Erp.Data.Entities.AccountsModule.JournalEntry", "JournalEntry")
                        .WithMany()
                        .HasForeignKey("JournalEntryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.PurchasesModule.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JournalEntry");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Erp.Data.Entities.PurchasesModule.DebitNoteItem", b =>
                {
                    b.HasOne("Erp.Data.Entities.PurchasesModule.DebitNote", "debitNote")
                        .WithMany("Items")
                        .HasForeignKey("DebitNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.InventoryModule.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("debitNote");
                });

            modelBuilder.Entity("Erp.Data.Entities.PurchasesModule.PurchaseInvoice", b =>
                {
                    b.HasOne("Erp.Data.Entities.AccountsModule.JournalEntry", "JournalEntry")
                        .WithMany()
                        .HasForeignKey("JournalEntryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.PurchasesModule.Supplier", "Supplier")
                        .WithMany("PurchaseInvoices")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JournalEntry");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Erp.Data.Entities.PurchasesModule.PurchaseInvoiceItem", b =>
                {
                    b.HasOne("Erp.Data.Entities.InventoryModule.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.PurchasesModule.PurchaseInvoice", "PurchaseInvoice")
                        .WithMany("Items")
                        .HasForeignKey("PurchaseInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("PurchaseInvoice");
                });

            modelBuilder.Entity("Erp.Data.Entities.PurchasesModule.PurchaseReturn", b =>
                {
                    b.HasOne("Erp.Data.Entities.AccountsModule.JournalEntry", "JournalEntry")
                        .WithMany()
                        .HasForeignKey("JournalEntryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.PurchasesModule.Supplier", "supplier")
                        .WithMany()
                        .HasForeignKey("supplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JournalEntry");

                    b.Navigation("supplier");
                });

            modelBuilder.Entity("Erp.Data.Entities.PurchasesModule.PurchaseReturnItem", b =>
                {
                    b.HasOne("Erp.Data.Entities.InventoryModule.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.PurchasesModule.PurchaseReturn", "PurchaseReturn")
                        .WithMany("Items")
                        .HasForeignKey("PurchaseReturnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("PurchaseReturn");
                });

            modelBuilder.Entity("Erp.Data.Entities.PurchasesModule.Supplier", b =>
                {
                    b.HasOne("Erp.Data.Entities.AccountsModule.SecondaryAccount", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Erp.Data.Entities.SalesModule.CreditNote", b =>
                {
                    b.HasOne("Erp.Data.Entities.CustomersModule.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Erp.Data.Entities.SalesModule.CreditNoteItem", b =>
                {
                    b.HasOne("Erp.Data.Entities.SalesModule.CreditNote", "creditNote")
                        .WithMany("Items")
                        .HasForeignKey("CreditNoteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.InventoryModule.Product", "product")
                        .WithMany()
                        .HasForeignKey("productID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("creditNote");

                    b.Navigation("product");
                });

            modelBuilder.Entity("Erp.Data.Entities.SalesModule.CustomerPayment", b =>
                {
                    b.HasOne("Erp.Data.Entities.CustomersModule.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.SalesModule.Invoice", "Invoice")
                        .WithMany("payments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Erp.Data.Entities.SalesModule.Invoice", b =>
                {
                    b.HasOne("Erp.Data.Entities.CustomersModule.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Erp.Data.Entities.SalesModule.InvoiceItem", b =>
                {
                    b.HasOne("Erp.Data.Entities.SalesModule.Invoice", "Invoice")
                        .WithMany("Items")
                        .HasForeignKey("InvoiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.InventoryModule.Product", "product")
                        .WithMany()
                        .HasForeignKey("productID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("product");
                });

            modelBuilder.Entity("Erp.Data.Entities.SalesModule.Quotation", b =>
                {
                    b.HasOne("Erp.Data.Entities.CustomersModule.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Erp.Data.Entities.SalesModule.QuotationItem", b =>
                {
                    b.HasOne("Erp.Data.Entities.InventoryModule.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.SalesModule.Quotation", "Quotation")
                        .WithMany("Items")
                        .HasForeignKey("QuotationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Quotation");
                });

            modelBuilder.Entity("Erp.Data.Entities.SalesModule.RecurringInvoice", b =>
                {
                    b.HasOne("Erp.Data.Entities.CustomersModule.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Erp.Data.Entities.SalesModule.RecurringInvoiceItem", b =>
                {
                    b.HasOne("Erp.Data.Entities.SalesModule.RecurringInvoice", "RInvoice")
                        .WithMany("Items")
                        .HasForeignKey("RInvoiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.InventoryModule.Product", "product")
                        .WithMany()
                        .HasForeignKey("productID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RInvoice");

                    b.Navigation("product");
                });

            modelBuilder.Entity("ExpenseExpenseCategory", b =>
                {
                    b.HasOne("Erp.Data.Entities.Finance.Expense", null)
                        .WithMany()
                        .HasForeignKey("ExpensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.Finance.ExpenseCategory", null)
                        .WithMany()
                        .HasForeignKey("expenseCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Erp.Data.Entities.HumanResources.Staff.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Erp.Data.Entities.MainModule.UserBase", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Erp.Data.Entities.MainModule.UserBase", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Erp.Data.Entities.HumanResources.Staff.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erp.Data.Entities.MainModule.UserBase", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Erp.Data.Entities.MainModule.UserBase", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Erp.Data.Entities.InventoryModule.Product", b =>
                {
                    b.HasOne("Erp.Data.Entities.InventoryModule.Category", null)
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Erp.Data.Entities.PurchasesModule.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Erp.Data.Entities.AccountsModule.Account", b =>
                {
                    b.Navigation("expenses");

                    b.Navigation("receipts");
                });

            modelBuilder.Entity("Erp.Data.Entities.AccountsModule.CostCenter", b =>
                {
                    b.Navigation("ExpenseCostCenters");

                    b.Navigation("ReceiptCostCenters");
                });

            modelBuilder.Entity("Erp.Data.Entities.AccountsModule.JournalEntry", b =>
                {
                    b.Navigation("details");
                });

            modelBuilder.Entity("Erp.Data.Entities.CustomersModule.Customer", b =>
                {
                    b.Navigation("ContactLists");
                });

            modelBuilder.Entity("Erp.Data.Entities.Finance.Expense", b =>
                {
                    b.Navigation("ExpenseCostCenters");

                    b.Navigation("multiAccExpenseItems");
                });

            modelBuilder.Entity("Erp.Data.Entities.Finance.Receipt", b =>
                {
                    b.Navigation("ReceiptCostCenters");

                    b.Navigation("multiAccReceiptItems");

                    b.Navigation("receiptCategories");
                });

            modelBuilder.Entity("Erp.Data.Entities.InventoryModule.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Erp.Data.Entities.InventoryModule.DeliveryVoucher", b =>
                {
                    b.Navigation("deliveryVoucherItems");
                });

            modelBuilder.Entity("Erp.Data.Entities.InventoryModule.PriceList", b =>
                {
                    b.Navigation("priceListItems");
                });

            modelBuilder.Entity("Erp.Data.Entities.InventoryModule.ProductAndServiceBase", b =>
                {
                    b.Navigation("StockTransactions");

                    b.Navigation("categories");
                });

            modelBuilder.Entity("Erp.Data.Entities.InventoryModule.ReceivingVoucher", b =>
                {
                    b.Navigation("receivingVoucherItems");
                });

            modelBuilder.Entity("Erp.Data.Entities.InventoryModule.StockTaking", b =>
                {
                    b.Navigation("stockTakingItems");
                });

            modelBuilder.Entity("Erp.Data.Entities.InventoryModule.TransformVoucher", b =>
                {
                    b.Navigation("TransformItems");
                });

            modelBuilder.Entity("Erp.Data.Entities.InventoryModule.Warehouse", b =>
                {
                    b.Navigation("StockTransactions");

                    b.Navigation("deliveryVouchers");

                    b.Navigation("receivingVouchers");
                });

            modelBuilder.Entity("Erp.Data.Entities.MainModule.Company", b =>
                {
                    b.Navigation("companyModules");

                    b.Navigation("companySubscriptions");
                });

            modelBuilder.Entity("Erp.Data.Entities.MainModule.Subscription", b =>
                {
                    b.Navigation("companySubscriptions");
                });

            modelBuilder.Entity("Erp.Data.Entities.PurchasesModule.DebitNote", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Erp.Data.Entities.PurchasesModule.PurchaseInvoice", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Erp.Data.Entities.PurchasesModule.PurchaseReturn", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Erp.Data.Entities.PurchasesModule.Supplier", b =>
                {
                    b.Navigation("PurchaseInvoices");
                });

            modelBuilder.Entity("Erp.Data.Entities.SalesModule.CreditNote", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Erp.Data.Entities.SalesModule.Invoice", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("payments");
                });

            modelBuilder.Entity("Erp.Data.Entities.SalesModule.Quotation", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Erp.Data.Entities.SalesModule.RecurringInvoice", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Erp.Data.Entities.AccountsModule.PrimaryAccount", b =>
                {
                    b.Navigation("ChildAccounts");
                });

            modelBuilder.Entity("Erp.Data.Entities.AccountsModule.SecondaryAccount", b =>
                {
                    b.Navigation("journalEntryDetails");
                });

            modelBuilder.Entity("Erp.Data.Entities.AccountsModule.PrimaryCostCenter", b =>
                {
                    b.Navigation("costCenters");
                });

            modelBuilder.Entity("Erp.Data.Entities.AccountsModule.SecondaryCostCenter", b =>
                {
                    b.Navigation("journalEntryDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
